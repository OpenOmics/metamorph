{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"metamorph \ud83d\udd2c An awesome metagenomic and metatranscriptomics pipeline This is the home of the pipeline, metamorph. Its long-term goals: to provide accurate quantification, taxonomic classification, and functional profiling of assembled (bacteria and archaea) metagenomes! Overview \u00b6 Welcome to metamorph's documentation! This guide is the main source of documentation for users that are getting started with the long pipeline name . The ./metamorph pipeline is composed several inter-related sub commands to setup and run the pipeline across different systems. Each of the available sub commands perform different functions: metamorph run Run the metamorph pipeline with your input files. metamorph unlock Unlocks a previous runs output directory. metamorph install Download remote reference files locally. metamorph cache Cache remote software containers locally. metamorph is a comprehensive workflow that starts off with assembly of short read DNA sequencing data (metagenome) to build contigs for each individual sample, followed by contig binning. Good quality genomic bins from all samples are futher combined and dereplicated to generate representative metagenome-assembled genomes or MAGs. These MAGs are further classified, quantified, and used to predict functional profiles. The short read DNA sequencing data (metatranscriptome) mapping to MAGs is used for functional profiling. It relies on technologies like Singularity 1 to maintain the highest-level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 2 , a flexible and scalable workflow management system, to submit jobs to a cluster. The pipeline is compatible with data generated from Illumina short-read sequencing technologies. As input, it accepts a set of FastQ files and can be run locally on a compute instance or on-premise using a cluster. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM (more coming soon!). A hybrid approach ensures the pipeline is accessible to all users. Before getting started, we highly recommend reading through the usage section of each available sub command. For more information about issues or trouble-shooting a problem, please checkout our FAQ prior to opening an issue on Github . Contribute \u00b6 This site is a living document, created for and by members like you. metamorph is maintained by the members of NCBR and is improved by continous feedback! We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository . Citation \u00b6 If you use this software, please cite it as below: BibTex APA Citation coming soon! Citation coming soon! References \u00b6 1. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 2. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600.","title":"About"},{"location":"#overview","text":"Welcome to metamorph's documentation! This guide is the main source of documentation for users that are getting started with the long pipeline name . The ./metamorph pipeline is composed several inter-related sub commands to setup and run the pipeline across different systems. Each of the available sub commands perform different functions: metamorph run Run the metamorph pipeline with your input files. metamorph unlock Unlocks a previous runs output directory. metamorph install Download remote reference files locally. metamorph cache Cache remote software containers locally. metamorph is a comprehensive workflow that starts off with assembly of short read DNA sequencing data (metagenome) to build contigs for each individual sample, followed by contig binning. Good quality genomic bins from all samples are futher combined and dereplicated to generate representative metagenome-assembled genomes or MAGs. These MAGs are further classified, quantified, and used to predict functional profiles. The short read DNA sequencing data (metatranscriptome) mapping to MAGs is used for functional profiling. It relies on technologies like Singularity 1 to maintain the highest-level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 2 , a flexible and scalable workflow management system, to submit jobs to a cluster. The pipeline is compatible with data generated from Illumina short-read sequencing technologies. As input, it accepts a set of FastQ files and can be run locally on a compute instance or on-premise using a cluster. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM (more coming soon!). A hybrid approach ensures the pipeline is accessible to all users. Before getting started, we highly recommend reading through the usage section of each available sub command. For more information about issues or trouble-shooting a problem, please checkout our FAQ prior to opening an issue on Github .","title":"Overview"},{"location":"#contribute","text":"This site is a living document, created for and by members like you. metamorph is maintained by the members of NCBR and is improved by continous feedback! We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository .","title":"Contribute"},{"location":"#citation","text":"If you use this software, please cite it as below: BibTex APA Citation coming soon! Citation coming soon!","title":"Citation"},{"location":"#references","text":"1. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 2. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600.","title":"References"},{"location":"license/","text":"MIT License \u00b6 Copyright \u00a9 2023 OpenOmics Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright \u00a9 2023 OpenOmics Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"faq/questions/","text":"Frequently Asked Questions \u00b6 This page is still under construction. If you need immediate help, please open an issue on Github!","title":"General Questions"},{"location":"faq/questions/#frequently-asked-questions","text":"This page is still under construction. If you need immediate help, please open an issue on Github!","title":"Frequently Asked Questions"},{"location":"usage/cache/","text":"metamorph cache \u00b6 1. About \u00b6 The metamorph executable is composed of several inter-related sub commands. Please see metamorph -h for all available options. This part of the documentation describes options and concepts for metamorph cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote resources for the metamorph pipeline. Caching remote resources allows the pipeline to run in an offline mode. The cache sub command can also be used to pull our pre-built reference bundles onto a new cluster or target system. The cache sub command creates local cache on the filesysytem for resources hosted on DockerHub or AWS S3. These resources are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created and re-used. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that its cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub. 2. Synopsis \u00b6 Coming Soon!","title":"metamorph cache"},{"location":"usage/cache/#metamorph-cache","text":"","title":"metamorph cache"},{"location":"usage/cache/#1-about","text":"The metamorph executable is composed of several inter-related sub commands. Please see metamorph -h for all available options. This part of the documentation describes options and concepts for metamorph cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote resources for the metamorph pipeline. Caching remote resources allows the pipeline to run in an offline mode. The cache sub command can also be used to pull our pre-built reference bundles onto a new cluster or target system. The cache sub command creates local cache on the filesysytem for resources hosted on DockerHub or AWS S3. These resources are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created and re-used. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that its cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub.","title":"1. About"},{"location":"usage/cache/#2-synopsis","text":"Coming Soon!","title":"2. Synopsis"},{"location":"usage/install/","text":"metamorph install \u00b6 1. About \u00b6 The metamorph executable is composed of several inter-related sub commands. Please see metamorph -h for all available options. This part of the documentation describes options and concepts for metamorph install sub command in more detail. This page is still under construction \ud83d\udc77, more information is coming soon!","title":"metamorph install"},{"location":"usage/install/#metamorph-install","text":"","title":"metamorph install"},{"location":"usage/install/#1-about","text":"The metamorph executable is composed of several inter-related sub commands. Please see metamorph -h for all available options. This part of the documentation describes options and concepts for metamorph install sub command in more detail. This page is still under construction \ud83d\udc77, more information is coming soon!","title":"1. About"},{"location":"usage/run/","text":"metamorph run \u00b6 1. About \u00b6 The metamorph executable is composed of several inter-related sub commands. Please see metamorph -h for all available options. This part of the documentation describes options and concepts for metamorph run sub command in more detail. With minimal configuration, the run sub command enables you to start running metamorph pipeline. Setting up the metamorph pipeline is fast and easy! In its most basic form, metamorph run only has two required inputs . 2. Synopsis \u00b6 $ metamorph run [--help] \\ [--mode {slurm,local}] [--job-name JOB_NAME] [--batch-id BATCH_ID] \\ [--tmp-dir TMP_DIR] [--silent] [--sif-cache SIF_CACHE] \\ [--singularity-cache SINGULARITY_CACHE] \\ [--dry-run] [--threads THREADS] \\ --input INPUT [INPUT ...] \\ --output OUTPUT The synopsis for each command shows its arguments and their usage. Optional arguments are shown in square brackets. A user must provide a list of FastQ (globbing is supported) to analyze via --input argument and an output directory to store results via --output argument. Use you can always use the -h option for information on a specific command. 2.1 Required arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --samplesheet [SHEETPATH] Full absolute path to the delimited plain-text sample sheet. Example: --samplesheet /home/user/samplesheet.txt [!NOTE] Delimiters supported: | file extension | delimiter | | -------------- | --------- | | txt | \\t | | tsv | \\t | | csv | , | Supported sample sheet formats : [!NOTE] Path = full absolute plain text file path to fastq[.gz] files R1 sample X = orientation of files in sample sheet n = total # samples DNA only - 1 column: \"DNA\" ________ | DNA | | ------- R1 sample 1 | path | R2 sample 1 | path | ... | path | R1 sample n | path | R2 sample n | path | -------- DNA & RNA - 2 columns: \"DNA\", \"RNA\" ________________ | DNA | RNA | | -------------- R1 sample 1 | path | path | R2 sample 1 | path | path | ... | path | path | R1 sample n | path | path | R2 sample n | path | path | ---------------- --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /data/$USER/metamorph_out 2.2 Analysis options \u00b6 Each of the following arguments are optional, and do not need to be provided. ...add non-required analysis options 2.3 Orchestration options \u00b6 Each of the following arguments are optional, and do not need to be provided. --dry-run Dry run the pipeline. type: boolean flag Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run -t(--triggers) Manual control of the snakemake rerun triggers.. Trigger values must be one or more of: - mtime - code - software-env - input - params See https://snakemake.readthedocs.io/en/stable/executing/cli.html for more details about snakemake rerun triggers. Default (in prority order): params, mtime, code, software-env, input Example: --triggers mtime,code --silent Silence standard output. type: boolean flag Reduces the amount of information directed to standard output when submitting master job to the job scheduler. Only the job id of the master job is returned. Example: --silent --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. slurm The slurm execution method will submit jobs to the SLURM workload manager . It is recommended running metamorph in this mode as execution will be significantly faster in a distributed environment. This is the default mode of execution. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. Example: --mode slurm --job-name JOB_NAME Set the name of the pipeline's master job. type: string default: pl:metamorph When submitting the pipeline to a job scheduler, like SLURM, this option always you to set the name of the pipeline's master job. By default, the name of the pipeline's master job is set to \"pl:metamorph\". Example: --job-name pl_id-42 --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The metamorph cache subcommand can be used to create a local SIF cache. Please see metamorph cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running metamorph with this option when ever possible. Example: --singularity-cache /data/$USER/SIFs --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12 --tmp-dir TMP_DIR Max number of threads for each process. type: path default: /lscratch/$SLURM_JOBID Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Example: --tmp-dir /scratch/$USER/ 2.4 Miscellaneous options \u00b6 Each of the following arguments are optional, and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help 3. Example \u00b6 # Step 1.) Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Step 2A.) Dry-run the pipeline ./metamorph run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /output \\ --mode slurm \\ --dry-run # Step 2B.) Run the metamorph pipeline # The slurm mode will submit jobs to # the cluster. It is recommended running # the pipeline in this mode. ./metamorph run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /output \\ --mode slurm","title":"metamorph run"},{"location":"usage/run/#metamorph-run","text":"","title":"metamorph run"},{"location":"usage/run/#1-about","text":"The metamorph executable is composed of several inter-related sub commands. Please see metamorph -h for all available options. This part of the documentation describes options and concepts for metamorph run sub command in more detail. With minimal configuration, the run sub command enables you to start running metamorph pipeline. Setting up the metamorph pipeline is fast and easy! In its most basic form, metamorph run only has two required inputs .","title":"1. About"},{"location":"usage/run/#2-synopsis","text":"$ metamorph run [--help] \\ [--mode {slurm,local}] [--job-name JOB_NAME] [--batch-id BATCH_ID] \\ [--tmp-dir TMP_DIR] [--silent] [--sif-cache SIF_CACHE] \\ [--singularity-cache SINGULARITY_CACHE] \\ [--dry-run] [--threads THREADS] \\ --input INPUT [INPUT ...] \\ --output OUTPUT The synopsis for each command shows its arguments and their usage. Optional arguments are shown in square brackets. A user must provide a list of FastQ (globbing is supported) to analyze via --input argument and an output directory to store results via --output argument. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/run/#21-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --samplesheet [SHEETPATH] Full absolute path to the delimited plain-text sample sheet. Example: --samplesheet /home/user/samplesheet.txt [!NOTE] Delimiters supported: | file extension | delimiter | | -------------- | --------- | | txt | \\t | | tsv | \\t | | csv | , | Supported sample sheet formats : [!NOTE] Path = full absolute plain text file path to fastq[.gz] files R1 sample X = orientation of files in sample sheet n = total # samples DNA only - 1 column: \"DNA\" ________ | DNA | | ------- R1 sample 1 | path | R2 sample 1 | path | ... | path | R1 sample n | path | R2 sample n | path | -------- DNA & RNA - 2 columns: \"DNA\", \"RNA\" ________________ | DNA | RNA | | -------------- R1 sample 1 | path | path | R2 sample 1 | path | path | ... | path | path | R1 sample n | path | path | R2 sample n | path | path | ---------------- --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /data/$USER/metamorph_out","title":"2.1 Required arguments"},{"location":"usage/run/#22-analysis-options","text":"Each of the following arguments are optional, and do not need to be provided. ...add non-required analysis options","title":"2.2 Analysis options"},{"location":"usage/run/#23-orchestration-options","text":"Each of the following arguments are optional, and do not need to be provided. --dry-run Dry run the pipeline. type: boolean flag Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run -t(--triggers) Manual control of the snakemake rerun triggers.. Trigger values must be one or more of: - mtime - code - software-env - input - params See https://snakemake.readthedocs.io/en/stable/executing/cli.html for more details about snakemake rerun triggers. Default (in prority order): params, mtime, code, software-env, input Example: --triggers mtime,code --silent Silence standard output. type: boolean flag Reduces the amount of information directed to standard output when submitting master job to the job scheduler. Only the job id of the master job is returned. Example: --silent --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. slurm The slurm execution method will submit jobs to the SLURM workload manager . It is recommended running metamorph in this mode as execution will be significantly faster in a distributed environment. This is the default mode of execution. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. Example: --mode slurm --job-name JOB_NAME Set the name of the pipeline's master job. type: string default: pl:metamorph When submitting the pipeline to a job scheduler, like SLURM, this option always you to set the name of the pipeline's master job. By default, the name of the pipeline's master job is set to \"pl:metamorph\". Example: --job-name pl_id-42 --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The metamorph cache subcommand can be used to create a local SIF cache. Please see metamorph cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running metamorph with this option when ever possible. Example: --singularity-cache /data/$USER/SIFs --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12 --tmp-dir TMP_DIR Max number of threads for each process. type: path default: /lscratch/$SLURM_JOBID Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Example: --tmp-dir /scratch/$USER/","title":"2.3 Orchestration options"},{"location":"usage/run/#24-miscellaneous-options","text":"Each of the following arguments are optional, and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help","title":"2.4 Miscellaneous options"},{"location":"usage/run/#3-example","text":"# Step 1.) Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Step 2A.) Dry-run the pipeline ./metamorph run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /output \\ --mode slurm \\ --dry-run # Step 2B.) Run the metamorph pipeline # The slurm mode will submit jobs to # the cluster. It is recommended running # the pipeline in this mode. ./metamorph run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /output \\ --mode slurm","title":"3. Example"},{"location":"usage/unlock/","text":"metamorph unlock \u00b6 1. About \u00b6 The metamorph executable is composed of several inter-related sub commands. Please see metamorph -h for all available options. This part of the documentation describes options and concepts for metamorph unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking metamorph pipeline output directory is fast and easy! In its most basic form, metamorph unlock only has one required input . 2. Synopsis \u00b6 $ ./metamorph unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 --output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/metamorph_out 2.2 Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help 3. Example \u00b6 # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory metamorph unlock --output /data/ $USER /output","title":"metamorph unlock"},{"location":"usage/unlock/#metamorph-unlock","text":"","title":"metamorph unlock"},{"location":"usage/unlock/#1-about","text":"The metamorph executable is composed of several inter-related sub commands. Please see metamorph -h for all available options. This part of the documentation describes options and concepts for metamorph unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking metamorph pipeline output directory is fast and easy! In its most basic form, metamorph unlock only has one required input .","title":"1. About"},{"location":"usage/unlock/#2-synopsis","text":"$ ./metamorph unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/unlock/#21-required-arguments","text":"--output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/metamorph_out","title":"2.1 Required Arguments"},{"location":"usage/unlock/#22-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help","title":"2.2 Options"},{"location":"usage/unlock/#3-example","text":"# Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory metamorph unlock --output /data/ $USER /output","title":"3. Example"}]}