#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

"""
ABOUT: This is the main entry for the pipeline.
REQUIRES:
  - python>=3.6
  - snakemake   (recommended>=6.0.0)
  - singularity (recommended==latest)
DISCLAIMER:
                    PUBLIC DOMAIN NOTICE
        NIAID Collaborative Bioinformatics Resource (NCBR)
   National Institute of Allergy and Infectious Diseases (NIAID)
This software/database is a "United  States Government Work" under
the terms of the United  States Copyright Act.  It was written as 
part of the author's official duties as a United States Government
employee and thus cannot be copyrighted. This software is freely
available to the public for use.
Although all  reasonable  efforts have been taken  to ensure  the
accuracy and reliability of the software and data, NCBR do not and
cannot warrant the performance or results that may  be obtained by 
using this software or data. NCBR and NIH disclaim all warranties,
express  or  implied,  including   warranties   of   performance, 
merchantability or fitness for any particular purpose.
Please cite the author and NIH resources like the "Biowulf Cluster" 
in any work or product based on this material.
USAGE:
  $ metamorph <run> [OPTIONS]
EXAMPLE:
  $ metamorph run --input *.R?.fastq.gz --output output/
"""

# Python standard library
from __future__ import print_function
import sys, os, subprocess, re, json, textwrap

# 3rd party imports from pypi
import argparse  # potential python3 3rd party package, added in python/3.5

# Local imports
from src import version 
from src.run import init, setup, bind, dryrun, runner
from src.shells import bash 
from src.utils import (err,
     exists,
     fatal,
     permissions,
     check_cache,
     require)


# Pipeline Metadata
__version__ = version
__authors__ = 'Skyler Kuhn, Neelam Redekar'
__email__ = 'skyler.kuhn@nih.gov, neelam.redekar@nih.gov'
__home__  =  os.path.dirname(os.path.abspath(__file__))
_name = os.path.basename(sys.argv[0])
_description = 'Metagenomic and metatranscriptomics pipeline'


def unlock(sub_args):
    """Unlocks a previous runs output directory. If snakemake fails ungracefully,
    it maybe required to unlock the working directory before proceeding again.
    This is rare but it does occasionally happen. Maybe worth add a --force
    option to delete the '.snakemake/' directory in the future.
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for unlock sub-command
    """
    print("Unlocking the pipeline's output directory...")
    outdir = sub_args.output

    try:
        unlock_output = subprocess.check_output([
            'snakemake', '--unlock',
            '--cores', '1',
            '--configfile=config.json'
        ], cwd = outdir,
        stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        # Unlocking process returned a non-zero exit code
        sys.exit("{}\n{}".format(e, e.output))

    print("Successfully unlocked the pipeline's working directory!")


def run(sub_args):
    """Initialize, setup, and run the pipeline.
    Calls initialize() to create output directory and copy over pipeline resources,
    setup() to create the pipeline config file, dryrun() to ensure their are no issues
    before running the pipeline, and finally run() to execute the Snakemake workflow.
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for run sub-command
    """
    # Step 0. Check for required dependencies
    # The pipelines has only two requirements:
    # snakemake and singularity 
    require(['snakemake', 'singularity'], ['snakemake', 'singularity'])

    # Step 1. Initialize working directory,
    # copy over required resources to run 
    # the pipeline
    git_repo = __home__
    input_files = init(
        repo_path = git_repo,
        output_path = sub_args.output,
        links = sub_args.input
    )

    # Step 2. Setup pipeline for execution, 
    # dynamically create config.json config
    # file from user inputs and base config
    # templates
    config = setup(sub_args, 
        ifiles = input_files,
        repo_path = git_repo,
        output_path = sub_args.output
    )

    # Step 3. Resolve docker/singularity bind
    # paths from the config file.
    bindpaths = bind(
        sub_args,
        config = config
    )

    # Optional Step: Dry-run pipeline
    if sub_args.dry_run:
        # Dryrun pipeline
        dryrun_output = dryrun(outdir = sub_args.output) # python3 returns byte-string representation
        print("\nDry-running {} pipeline:\n{}".format(_name, dryrun_output.decode("utf-8")))
        sys.exit(0)


def cache(sub_args):
    """Caches remote resources or reference files stored on DockerHub and S3.
    Local SIFs will be created from images defined in 'config/containers/images.json'.
    @TODO: add option to cache other shared S3 resources (i.e. kraken db and fqscreen indices)
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for unlock sub-command
    """
    print(sub_args)
    fatal('NotImplementedError... Comming Soon!')

 
def parsed_arguments(name, description):
    """Parses user-provided command-line arguments. Requires argparse and textwrap
    package. argparse was added to standard lib in python 3.5 and textwrap was added
    in python 3.5. To create custom help formatting for subparsers a docstring is
    used create the help message for required options. argparse does not support named
    subparser groups, which is normally what would be used to accomphish this reformatting.
    As so, the help message for require options must be suppressed. If a new required arg
    is added to a subparser, it must be added to the docstring and the usage statement
    also must be updated.
    @param name <str>:
        Name of the pipeline or command-line tool 
    @param description <str>:
        Short description of pipeline or command-line tool 
    """

    # Create a top-level parser
    parser = argparse.ArgumentParser(description = '{}: {}'.format(name, description))

    # Adding Verison information
    parser.add_argument('--version', action = 'version', version='%(prog)s {}'.format(__version__))

    # Create sub-command parser
    subparsers = parser.add_subparsers(help='List of available sub-commands')

    # Sub-parser for the "run" sub-command
    # Grouped sub-parser arguments are currently 
    # not supported: https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_run_options = textwrap.dedent("""\
        usage: {} run [--help] \\
                            [--mode <local,slurm>] \\
                            [--job-name JOB_NAME] \\
                            [--dry-run] \\
                            [--silent] \\
                            [--singularity-cache SINGULARITY_CACHE] \\
                            [--sif-cache SIF_CACHE] \\
                            [--tmpdir TMP_DIR] \\
                            [--threads THREADS] \\
                            --input INPUT [INPUT ...] \\
                            --output OUTPUT

        required arguments:
          --input INPUT [INPUT ...]
                                Input FastQ file(s) to process. The pipeline does NOT
                                support single-end data. FastQ files for one or more  
                                samples can be provided.
                                Example: --input .tests/*.R?.fastq.gz
          --output OUTPUT
                                Path to an output directory. This location is where
                                the pipeline will create all of its output files, also
                                known as the pipeline's working directory. If the user
                                provided working directory has not been initialized,
                                it will be created automatically.
                                Example: --output /data/$USER/output

        """.format(name))

    # Display example usage in epilog
    run_epilog = textwrap.dedent("""\
        example:
          # Step 1.) Grab an interactive node,
          # do not run on head node!
          sinteractive --mem=8g --cpus-per-task=4
          module purge
          module load singularity snakemake

          # Step 2A.) Dry-run the pipeline
          ./{} run --input .tests/*.R?.fastq.gz \\
                         --output /data/$USER/output\\
                         --mode slurm \\
                         --dry-run

          # Step 2B.) Run the {} pipeline
          # The slurm mode will submit jobs to 
          # the cluster. It is recommended running 
          # the pipeline in this mode.
          ./{} run --input .tests/*.R?.fastq.gz \\
                         --output /data/$USER/output \\
                         --mode slurm

        version:
          {}
        """.format(name, name, name, __version__))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_run = subparsers.add_parser('run',
        help = 'Run the {} pipeline with input files.'.format(name),
        usage = argparse.SUPPRESS,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description = required_run_options,
        epilog  = run_epilog
    )

    # Required Arguments
    # Input FastQ files
    subparser_run.add_argument('--input',
        # Check if the file exists and if it is readable
        type = lambda file: permissions(parser, file, os.R_OK),
        required = True,
        nargs = '+',
        help = argparse.SUPPRESS
    )

    # Output Directory (analysis working directory)
    subparser_run.add_argument('--output',
        type = lambda option: os.path.abspath(os.path.expanduser(option)),
        required = True,
        help = argparse.SUPPRESS
    )

    # Optional Arguments
    # Execution Method (run locally on a compute node, submit to SLURM job scheduler, etc.)
    subparser_run.add_argument('--mode',
        type = str,
        required = False,
        default = "slurm",
        choices = ['slurm', 'local'],
        help = 'Execution Method [Default: slurm]. Defines the mode or method of execution. \
        Vaild mode options include: local or slurm. \
        local: uses local method of execution. local executions will run serially on \
        compute instance. This is useful for testing, debugging, or when a users does \
        not have access to a high performance computing environment. If this option is \
        not provided, it will default to a local execution mode. \
        slurm: uses slurm and singularity backend. The slurm execution method will submit \
        jobs to a cluster. It is recommended running {} in this mode as execution \
        will be significantly faster in a distributed environment. \
        Example: --mode slurm'.format(name)
    )

    # Name of master job
    subparser_run.add_argument('--job-name',
        type = str,
        required = False,
        default = 'pl:{}'.format(name),
        help = 'Set the name of the pipeline\'s master job. \
        When submitting the pipeline to a job scheduler, like SLURM, \
        this option always you to set the name of the pipeline\'s master \
        job. By default, the name of the pipeline\'s master job \
        is set to "pl:{}". \
        Example: --job-name {}_main'.format(name, name)
    )

    # Dry-run (do not execute the workflow, prints what steps remain)
    subparser_run.add_argument('--dry-run',
        action = 'store_true',
        required = False,
        default = False,
        help = 'Do not execute anything, and only display what steps in the pipeline remain or \
        will be run.'
    )

    # Silent output mode
    subparser_run.add_argument('--silent',
        action = 'store_true',
        required = False,
        default = False,
        help = 'Silence standard output. Reduces the amount of information directed \
        to standard output when submitting master job to the job scheduler. Only the \
        job id of the master job is returned.'
    )
    
    # Singularity cache directory (default uses output directory)
    subparser_run.add_argument('--singularity-cache',
        type = lambda option: check_cache(parser, os.path.abspath(os.path.expanduser(option))),
        required = False,
        help = 'Overrides the $SINGULARITY_CACHEDIR environment variable. Singularity will cache \
        image layers pulled from remote registries. By default, the cache is set to \
        \'/path/to/output/directory/.singularity/\'. \
        Please note that this cache cannot be shared across users.'
    )
    
    # Local SIF cache directory (default pull from Dockerhub) 
    subparser_run.add_argument('--sif-cache',
        type = lambda option: os.path.abspath(os.path.expanduser(option)),
        required = False,
        help = 'Path where a local cache of SIFs are stored. \
        This cache can be shared across users if permissions are \
        set correctly. If a SIF does not exist in the SIF cache, \
        the image will be pulled from Dockerhub. The {} cache \
        subcommand can be used to create a local SIF cache. Please see \
        {} cache for more information.'.format(name, name)
    )

    # Base directory to write temporary files 
    subparser_run.add_argument('--tmp-dir',
        type = str,
        required = False,
        default = '/lscratch/$SLURM_JOBID/',
        help = 'Path on the filesystem for writing intermediate, temporary output \
        files. By default, this variable is set to \'/lscratch/$SLURM_JOBID\' \
        for backwards compatibility with the NIH\'s Biowulf cluster; however, \
        if you are running the pipeline on another cluster, this option will \
        need to be specified. Ideally, this path should point to a dedicated \
        location on the filesystem for writing tmp files. On many systems, this \
        location is set to somewhere in /scratch. If you need to inject a variable \
        into this string that should NOT be expanded, please quote this options \
        value in single quotes. As an example, on the NCI/NIH FRCE cluster the \
        value of this option would be set to \
        --tmp-dir \'/scratch/cluster_scratch/$USER/\', \
        default:  \'/lscratch/$SLURM_JOBID/\''
    )

    # Number of threads for the pipeline's main proceess
    # This is only applicable for local rules or when the 
    # pipeline is running in local mode.
    subparser_run.add_argument('--threads',
        type = int,
        required = False,
        default = 2,
        help = 'Max number of threads for local processes. It is recommended \
        setting this vaule to the maximum number of CPUs available on the host \
        machine, default: 2.'
    )

    # Sub-parser for the "unlock" sub-command
    # Grouped sub-parser arguments are currently 
    # not supported: https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_unlock_options = textwrap.dedent("""\
        usage: {} unlock [-h] --output OUTPUT

        If the pipeline fails ungracefully, it maybe required to unlock the working
        directory before proceeding again. Please verify that the pipeline is not
        running before running this command. If the pipeline is still running, the
        workflow manager will report the working directory is locked. This is normal
        behavior. Do NOT run this command if the pipeline is still running.

        required arguments:
          --output OUTPUT
                                Path to a previous run's output directory to
                                unlock. This will remove a lock on the working 
                                directory. Please verify that the pipeline is 
                                not running before running this command.
                                Example: --output /data/$USER/output

        """.format(name))

    # Display example usage in epilog
    unlock_epilog = textwrap.dedent("""\
        example:
          # Unlock output directory of pipeline
          {} unlock --output /scratch/$USER/output

        version:
          {}
        """.format(name, __version__))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_unlock = subparsers.add_parser('unlock',
        help = 'Unlocks a previous runs output directory.',
        usage = argparse.SUPPRESS,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description = required_unlock_options,
        epilog = unlock_epilog
    )

    # Required Arguments
    # Output Directory (analysis working directory)
    subparser_unlock.add_argument('--output',
        type = str,
        required = True,
        help = argparse.SUPPRESS
    )

    # Sub-parser for the "cache" sub-command
    # Grouped sub-parser arguments are 
    # not supported: https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_cache_options = textwrap.dedent("""\
        usage: {} cache [-h] [-n] --sif-cache SIF_CACHE

        Creates a local cache resources hosted on DockerHub or AWS S3.
        These resources are normally pulled onto the filesystem when the
        pipeline runs; however, due to network issues or DockerHub pull
        rate limits, it may make sense to pull the resources once so a
        shared cache can be created. It is worth noting that a singularity
        cache cannot normally be shared across users. Singularity strictly
        enforces that a cache is owned by the user. To get around this
        issue, the cache subcommand can be used to create local SIFs on
        the filesystem from images on DockerHub.

        required arguments:
          --sif-cache SIF_CACHE
                      Path where a local cache of SIFs will be stored.
                      Images defined in config/containers/images.json
                      will be pulled into the local filesystem. The
                      path provided to this option can be passed to
                      the --sif-cache option of the run sub command.
                      Please see {} run sub command for more
                      information.

                      Example: --sif-cache /scratch/$USER/cache

        """.format(name, name))

    # Display example usage in epilog
    cache_epilog = textwrap.dedent("""\
        example:
          # Cache remote resources of pipeline
          {} cache --sif-cache /scratch/$USER/cache

        version:
          {}
        """.format(name, __version__))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_cache = subparsers.add_parser('cache',
        help = 'Cache remote resources locally.',
        usage = argparse.SUPPRESS,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description = required_cache_options,
        epilog = cache_epilog
    )

    # Required Arguments
    # Output Directory (analysis working directory)
    subparser_cache.add_argument('--sif-cache',
        type = lambda option: os.path.abspath(os.path.expanduser(option)),
        required = True,
        help = argparse.SUPPRESS
    )

    # Optional Arguments
    # Dry-run cache command (do not pull any remote resources)
    subparser_cache.add_argument('--dry-run',
        action = 'store_true',
        required = False,
        default = False,
        help = 'Only display what remote resources would be pulled.'
    )

    # Define handlers for each sub-parser
    subparser_run.set_defaults(func = run)
    subparser_unlock.set_defaults(func = unlock)
    subparser_cache.set_defaults(func = cache)

    # Parse command-line args
    args = parser.parse_args()
    return args


def main():

    # Collect args for sub-command
    args = parsed_arguments(
        name = _name,
        description = _description
    )

    # Display version information
    err('{} ({})'.format(_name, __version__))

    # Mediator method to call sub-command's set handler function
    args.func(args)


if __name__ == '__main__':
    main()
