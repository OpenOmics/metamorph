import json
import os, sys
from os.path import join
from os import listdir
from scripts.common import allocated, provided, references, str_bool, list_bool


# Global workflow variables
configfile: "config.json"  # Generated from user input and config/*.json

datapath                   = config["project"]["datapath"]
rna_datapath               = config["project"].get("rna_datapath", [])
workpath                   = config["project"]["workpath"]
tmpdir                     = config["options"]["tmp_dir"]
megahit_only               = bool(int(config["options"]["assembler_mode"]))
rna_included               = list_bool(config.get("rna", 'false'))
rna_sample_stems           = config.get("rna", [])
samples                    = config["samples"]
analysis_mode              = config["options"]["analysis_mode"]

# DNA directories
top_assembly_dir           = join(workpath, config['project']['id'], "metawrap_assembly")
top_readqc_dir             = join(workpath, config['project']['id'], "metawrap_read_qc")
top_trim_dir               = join(workpath, config['project']['id'], "trimmed_reads")
top_refine_dir             = join(workpath, config['project']['id'], "metawrap_bin_refine")
top_tax_dir                = join(workpath, config['project']['id'], "metawrap_kmer")
top_binning_dir            = join(workpath, config['project']['id'], "metawrap_binning")
top_mags_dir               = join(workpath, config['project']['id'], "mags")
top_mapping_dir            = join(workpath, config['project']['id'], "humann3_dna")
top_centrifuger_dir        = join(workpath, config['project']['id'], "centrifuger_dna")

# RNA directories
top_readqc_dir_rna         = join(workpath, config['project']['id'], "metawrap_read_qc_RNA")
top_trim_dir_rna           = join(workpath, config['project']['id'], "trimmed_reads_RNA")
top_map_dir_rna            = join(workpath, config['project']['id'], "mapping_RNA")
humann3_dir_rna            = join(workpath, config['project']['id'], "humann3_rna")
top_centrifuger_dir_rna    = join(workpath, config['project']['id'], "centrifuger_rna")

# Read in resource information, containing information about threads, mem, walltimes, etc.
with open(join(workpath, "config", "cluster.json")) as fh:
    cluster = json.load(fh)

start_r1 = expand(join(workpath, "dna", "{name}_R1.fastq.gz"), name=samples)
start_r2 = expand(join(workpath, "dna", "{name}_R2.fastq.gz"), name=samples)

if rna_included:
    start_r1_rna = expand(join(workpath, "rna", "{rname}_R1.fastq.gz"), rname=rna_sample_stems)
    start_r2_rna = expand(join(workpath, "rna", "{rname}_R2.fastq.gz"), rname=rna_sample_stems)
else:
    start_r1_rna, start_r2_rna = [], []

# print('---- norm len ' + str(len(a_list)) + ' unique len ' + str(len(set(a_list))) + ' ----')
# exit(a_list)
# print('---- ' + ','.join(rna_sample_stems) + ' ----')
# exit(rna_sample_stems)

rule all:
    input:
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        # DNA preprocessing endpoints #
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        start_r1,
        start_r2,
        expand(join(top_readqc_dir, "{name}", "{name}_R1_pretrim_report.html"), name=samples),
        expand(join(top_readqc_dir, "{name}", "{name}_R2_pretrim_report.html"), name=samples),
        expand(join(top_readqc_dir, "{name}", "{name}_R1_postrim_report.html"), name=samples),
        expand(join(top_readqc_dir, "{name}", "{name}_R2_postrim_report.html"), name=samples),
        expand(join(top_trim_dir, "{name}", "{name}_R1_trimmed.fastq.gz"), name=samples),
        expand(join(top_trim_dir, "{name}", "{name}_R2_trimmed.fastq.gz"), name=samples),
        expand(join(top_trim_dir, "{name}", "{name}_R1_dehost.fastq.gz"), name=samples),
        expand(join(top_trim_dir, "{name}", "{name}_R2_dehost.fastq.gz"), name=samples),
        expand(join(top_centrifuger_dir, "{name}_centrifuger_classification.tsv"), name=samples),
        expand(join(top_centrifuger_dir, "{name}_centrifuger_quantification_report.tsv"), name=samples),
        expand(join(top_centrifuger_dir, "{name}_centrifuger_quantification_report_mpl.tsv"), name=samples),
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        # DNA read-based mode endpoints #
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        *provided([
            expand(join(top_mapping_dir, '{name}_genefamilies.tsv'), name=samples),
            expand(join(top_mapping_dir, '{name}_pathabundance.tsv'), name=samples),
            expand(join(top_mapping_dir, '{name}_pathcoverage.tsv'), name=samples),
            expand(join(top_mapping_dir, '{name}_bugs_list.tsv'),name=samples),
            join(top_mapping_dir, 'merged_bugs_list.tsv'),
            join(top_mapping_dir, 'merged_pathabundance.cpm.stratified.tsv'),
            join(top_mapping_dir, 'merged_pathabundance.cpm.unstratified.tsv'),
            join(top_mapping_dir, 'diversity_analysis', 'merged_bugs_list_shannon.tsv'),
            join(top_mapping_dir, 'diversity_analysis', 'merged_bugs_list_richness.tsv'),
            join(top_mapping_dir, 'diversity_analysis', 'merged_bugs_list_jaccard.tsv'),
            join(top_mapping_dir, 'diversity_analysis', 'merged_bugs_list_weighted-unifrac.tsv'),
            join(top_mapping_dir, 'diversity_analysis', 'merged_bugs_list_unweighted-unifrac.tsv')
        ], condition = analysis_mode in ["read-based", "combined"]),
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        # DNA read-based mode endpoints #
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        *provided([
            expand(join(top_trim_dir, "{name}", "{name}_R1_dehost.fastq"), name=samples),
            expand(join(top_trim_dir, "{name}", "{name}_R2_dehost.fastq"), name=samples),
            expand(join(top_assembly_dir, "{name}", "final_assembly.fasta"), name=samples),
            expand(join(top_assembly_dir, "{name}", "assembly_report.html"), name=samples),
            expand(join(top_tax_dir, "GTDBTK_classify_wf"), name=samples),
            expand(join(top_tax_dir, "GUNC_detect"), name=samples),
            # assembly binning
            expand(join(top_binning_dir, "{name}", "maxbin2_bins.contigs"), name=samples),
            expand(join(top_binning_dir, "{name}", "maxbin2_bins.stats"), name=samples),
            expand(join(top_binning_dir, "{name}", "metabat2_bins.contigs"), name=samples),
            expand(join(top_binning_dir, "{name}", "metabat2_bins.stats"), name=samples),
            expand(join(top_binning_dir, "{name}", "metawrap_50_5_bins.contigs"), name=samples),
            expand(join(top_binning_dir, "{name}", "metawrap_50_5_bins.stats"), name=samples),
            expand(join(top_binning_dir, "{name}", "figures", "binning_results.png"), name=samples),
            # bin refinement
            expand(join(top_refine_dir, "dRep", "data_tables", "Widb.csv"), name=samples),
            expand(join(top_refine_dir, "dRep", "figures", "Winning_genomes.pdf"), name=samples),
            expand(join(top_refine_dir, "dRep", "log", "cluster_arguments.json"), name=samples),
            # bin statistics
            expand(join(top_refine_dir, "{name}", "RefinedBins_summmary.txt"), name=samples),
            expand(join(top_refine_dir, "{name}", "named_maxbin2_bins.stats"), name=samples),
            expand(join(top_refine_dir, "{name}", "named_metabat2_bins.stats"), name=samples),
            expand(join(top_refine_dir, "{name}", "named_metawrap_bins.stats"), name=samples),
            join(top_refine_dir, "RefinedBins_summmary.txt"),
            join(top_refine_dir, "cumulative_stats_maxbin.txt"),
            join(top_refine_dir, "cumulative_stats_metabat2.txt"),
            join(top_refine_dir, "cumulative_stats_metawrap.txt"),
            # contig annotation
            expand(join(top_refine_dir, "contig_annotation", "out.BAT.bin2classification.summary.txt"), name=samples),
            # BBMap mapping to MAGs
            expand(join(top_mags_dir, "{name}", "index"), name=samples),
            expand(join(top_mags_dir, "{name}", "DNA", "{name}.statsfile"), name=samples),
            expand(join(top_mags_dir, "{name}", "DNA", "{name}.scafstats"), name=samples),
            expand(join(top_mags_dir, "{name}", "DNA", "{name}.covstat"), name=samples),
            expand(join(top_mags_dir, "{name}", "DNA", "{name}.rpkm"), name=samples),
            expand(join(top_mags_dir, "{name}", "DNA", "{name}.refstats"), name=samples),
        ], condition = analysis_mode in ["assembly-based", "combined"]),
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        # RNA preprocessing endpoints #
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        *provided([
            start_r1_rna,
            start_r2_rna,
            expand(join(top_readqc_dir_rna, "{name}", "{name}_R1_pretrim_report.html"), name=rna_sample_stems),
            expand(join(top_readqc_dir_rna, "{name}", "{name}_R2_pretrim_report.html"), name=rna_sample_stems),
            expand(join(top_readqc_dir_rna, "{name}", "{name}_R1_postrim_report.html"), name=rna_sample_stems),
            expand(join(top_readqc_dir_rna, "{name}", "{name}_R2_postrim_report.html"), name=rna_sample_stems),
            expand(join(top_trim_dir_rna, "{name}", "{name}_R1_trimmed.fastq"), name=rna_sample_stems),
            expand(join(top_trim_dir_rna, "{name}", "{name}_R2_trimmed.fastq"), name=rna_sample_stems),
            expand(join(top_trim_dir_rna, "{name}", "{name}_R1_trimmed.fastq.gz"), name=rna_sample_stems),
            expand(join(top_trim_dir_rna, "{name}", "{name}_R2_trimmed.fastq.gz"), name=rna_sample_stems),
            expand(join(top_trim_dir_rna, "{name}", "{name}_R1_dehost.fastq.gz"), name=rna_sample_stems),
            expand(join(top_trim_dir_rna, "{name}", "{name}_R2_dehost.fastq.gz"), name=rna_sample_stems),
            expand(join(top_centrifuger_dir_rna, "{name}_centrifuger_classification.tsv"), name=rna_sample_stems),
            expand(join(top_centrifuger_dir_rna, "{name}_centrifuger_quantification_report.tsv"), name=rna_sample_stems),
            expand(join(top_centrifuger_dir_rna, "{name}_centrifuger_quantification_report_mpl.tsv"), name=rna_sample_stems),
        ], condition = rna_included),
        # ~~~~~~~~~~~~~~~~~~~~~~~~ #
        # RNA read-based endpoints #
        # ~~~~~~~~~~~~~~~~~~~~~~~~ #
        *provided([
            expand(join(humann3_dir_rna, '{name}_genefamilies.tsv'), name=rna_sample_stems),
            expand(join(humann3_dir_rna, '{name}_pathabundance.tsv'), name=rna_sample_stems),
            expand(join(humann3_dir_rna, '{name}_pathcoverage.tsv'), name=rna_sample_stems),
            join(humann3_dir_rna, 'merged_pathabundance.cpm.stratified.rna.tsv'),
            join(humann3_dir_rna, 'merged_pathabundance.cpm.unstratified.rna.tsv')
        ], condition = (analysis_mode in ("read-based", "combined")) and rna_included),
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        # RNA assembly-based endpoints #
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
        *provided([
            expand(join(top_map_dir_rna, "{rname}", "{rname}.RNA.aligned.sam"), rname=rna_sample_stems),
            expand(join(top_map_dir_rna, "{rname}", "{rname}.RNA.statsfile"), rname=rna_sample_stems),
            expand(join(top_map_dir_rna, "{rname}", "{rname}.RNA.scafstats"), rname=rna_sample_stems),
            expand(join(top_map_dir_rna, "{rname}", "{rname}.RNA.covstat"), rname=rna_sample_stems),
            expand(join(top_map_dir_rna, "{rname}", "{rname}.RNA.rpkm"), rname=rna_sample_stems),
            expand(join(top_map_dir_rna, "{rname}", "{rname}.RNA.refstats"), rname=rna_sample_stems)
        ], condition = (analysis_mode in ("read-based", "combined")) and rna_included)

include: join("rules", "DNA.smk")
include: join("rules", "RNA.smk")
include: join("rules", "hooks.smk")
