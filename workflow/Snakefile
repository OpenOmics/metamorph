import json
import os, sys
from os.path import join
from os import listdir
from scripts.common import allocated, provided, references, str_bool


datapath                   = config["project"]["datapath"]
workpath                   = config["project"]["workpath"]  # Pipeline"s output directory
tmpdir                     = config["options"]["tmp_dir"]  # Temporary directory
samples                    = config["samples"]  # List containing basename of samples
top_readqc_dir             = join(workpath, config['project']['id'], "metawrap_read_qc")
top_trim_dir               = join(workpath, config['project']['id'], "trimmed_reads")


# Read in resource information, containing information about threads, mem, walltimes, etc.
# TODO: Add handler for when the mode is set to local.
with open(join(workpath, "config", "cluster.json")) as fh:
    cluster = json.load(fh)


# Global workflow variables
configfile: "config.json"  # Generated from user input and config/*.json

if config['coassembly']:
    start_r1 = join(workpath, "concatenated.R1.fastq")
    start_r2 = join(workpath, "concatenated.R1.fastq")
    start_dc = []
else:
    start_r1 = expand(join(workpath, "dna", "{name}_R1.fastq"), name=config['samples'])
    start_r2 = expand(join(workpath, "dna", "{name}_R2.fastq"), name=config['samples'])
    start_dc = join(datapath, "{stem}.fastq.gz")

# Final ouput files of the pipeline
rule all:
    input:
        # dna read decompress
        # ~~~~~~~~~~~~~~~
        start_r1,
        start_r2,
        # read qc and filtering
        # ~~~~~~~~~~~~~~~
        expand(join(top_readqc_dir, "{name}", "{name}_R1_pretrim_report.html"), name=samples),
        expand(join(top_readqc_dir, "{name}", "{name}_R2_pretrim_report.html"), name=samples),
        expand(join(top_readqc_dir, "{name}", "{name}_R1_postrim_report.html"), name=samples),
        expand(join(top_readqc_dir, "{name}", "{name}_R2_postrim_report.html"), name=samples),
        expand(join(top_trim_dir, "{name}", "{name}_R1_trimmed.fastq.gz"), name=samples),
        expand(join(top_trim_dir, "{name}", "{name}_R2_trimmed.fastq.gz"), name=samples),
        # genome assembly
        # ~~~~~~~~~~~~~~~
        expand(join(workpath, config['project']['id'], "metawrap_assembly", "{name}", "final_assembly.fasta"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_assembly", "{name}", "assembly_report.html"), name=samples),
        # taxonomic classification
        # ~~~~~~~~~~~~~~~
        expand(join(workpath, config['project']['id'], "metawrap_kmer", "{name}", "final_assembly.krona"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_kmer", "{name}", "kronagram.html"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_kmer", "{name}", "final_assembly.krak2"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_kmer", "{name}", "final_assembly.kraken2"), name=samples),
        # assembly binning
        # ~~~~~~~~~~~~~~~
        expand(join(workpath, config['project']['id'], "metawrap_binning", "{name}", "maxbin2_bins.contigs"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_binning", "{name}", "maxbin2_bins.stats"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_binning", "{name}", "metabat2_bins.contigs"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_binning", "{name}", "metabat2_bins.stats"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_binning", "{name}", "metawrap_50_5_bins.contigs"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_binning", "{name}", "metawrap_50_5_bins.stats"), name=samples),
        expand(join(workpath, config['project']['id'], "metawrap_binning", "{name}", "figures", "binning_results.png"), name=samples),
        # bin refinement
        # ~~~~~~~~~~~~~~~
        expand(join(workpath, config['project']['id'], "metawrap_bin_refine", "{name}", "dereplicated_bins"), name=samples),
        

# Import rules
include: join("rules", "DNA.smk")
# include: join("rules", "RNA.smk")
include: join("rules", "hooks.smk")